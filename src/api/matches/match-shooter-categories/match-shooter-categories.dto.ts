import {
	ApiProperty,
	ApiPropertyOptional,
	PartialType,
	PickType,
} from "@nestjs/swagger";
import { Type } from "class-transformer";
import {
	IsArray,
	IsInt,
	IsObject,
	IsOptional,
	IsString,
	ValidateNested,
} from "class-validator";
import { MatchShooter, MatchShooterCategory } from "src/entities";
import { MatchShooterIdDto } from "../match-shooters/match-shooters.dto";

// generated by the context from above

export class MatchShooterCategoryDto extends MatchShooterCategory {
	@ApiProperty({
		description: "Id of the match shooter category",
		example: 1,
	})
	@Type(() => Number)
	@IsInt()
	id: number;

	@ApiProperty({
		description: "Name of the match shooter category",
		example: "A",
	})
	@Type(() => String)
	@IsString()
	name: string;

	matchShooters?: MatchShooter[];

	@ApiPropertyOptional({
		description: "Match shooters' id of the category",
		example: [1, 2, 3],
		readOnly: true,
	})
	@Type(() => Number)
	@IsArray()
	@IsInt({ each: true })
	readonly matchShooterIds?: number[];

	@ApiProperty({
		description: "Count of the match shooters in the category",
		example: 3,
		readOnly: true,
	})
	@Type(() => Number)
	@IsInt()
	readonly matchShooterCount: number;
}

export class CreateMatchShooterCategoryDto extends PickType(
	MatchShooterCategoryDto,
	["name", "matchShooters"] as const,
) {
	@ApiPropertyOptional({
		description: "Match shooters of the category",
		type: () => [MatchShooterIdDto],
	})
	@IsOptional()
	@IsArray()
	@IsObject({ each: true })
	@ValidateNested()
	@Type(() => MatchShooterIdDto)
	matchShooters?: MatchShooter[];
}

export class UpdateMatchShooterCategoryDto extends PartialType(
	CreateMatchShooterCategoryDto,
) {}

export class MatchShooterCategoryIdDto extends PickType(
	MatchShooterCategoryDto,
	["id"] as const,
) {}
